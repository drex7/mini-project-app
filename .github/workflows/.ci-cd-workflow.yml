name: Build & Push Image to Amazon Private ECR , and trigger blue-green deployment

run-name: Run triggered by ${{ github.event_name }} with commit message ${{ github.event.head_commit.message }}

on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPOSITORY: week5/mini-project-repo
  ECS_TASK_DEFINITION: gallery-app-task-definition
  CONTAINER_NAME: GalleryAppContainer
  SERVICE_NAME: gallery-app-task-definition-service
  CODEDEPLOY_DEPLOYMENT_GROUP: GalleryAppDeploymentGroup
  CLUSTER_NAME: mini-project-1-cluster
  CODEDEPLOY_APPLICATION: GalleryAppCodeDeployApplication

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      image: ${{ steps.generate-img-name.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Private Registry
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Generate image name
        id: generate-img-name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "image_name=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" \
          >> $GITHUB_OUTPUT

      # - name: Build, tag, and push docker image to Amazon ECR
      #   id: build-image1
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #     image_name: ${{ steps.generate-img-name.outputs.image_name }}
      #   run: |
      #     docker build -t ${{ env.image_name }} .
      #     docker image push ${{ env.image_name }}
      #     echo "ECR_IMAGE_NAME=${{ env.image_name }}"
      #     # echo "image_name=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"

      #     # echo "image_test=testing-image" >> "$GITHUB_OUTPUT"

      - name: Build, tag and push image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.generate-img-name.outputs.image_name }}
          file: deployment/Dockerfile
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-blue-green:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug variables
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          image_env: ${{ needs.build-and-push.outputs.image }}
          image_env1: ${{ needs.build-and-push.outputs.image1 }}
        run: |
          echo "ECR_IMAGE: ${{ needs.build-and-push.outputs.image }}"
          echo "ECR_IMAGE_TEST: ${{ needs.build-and-push.outputs.image1 }}"
          echo "ECR_IMAGE_env: ${{ env.image_env }}"
          echo "ECR_IMAGE_env1: ${{ env.image_env1 }}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployment/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          codedeploy-appspec: appspec.yaml
          codedeploy-application: ${{ env.CODEDEPLOY_APPLICATION }}
          codedeploy-deployment-group: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
          wait-for-service-stability: true
