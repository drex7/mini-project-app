name: Build & Push Image to Amazon Private ECR , and trigger blue-green deployment

run-name: Run triggered by ${{ github.event_name }} with commit message ${{ github.event.head_commit.message }}

on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}
  ECS_TASK_DEFINITION: "gallery-app-task-definition"
  CONTAINER_NAME: 'GalleryAppContainer'
  SERVICE_NAME: 'gallery-app-task-definition-service'
  CODEDEPLOY_DEPLOYMENT_GROUP: 'GalleryAppDeploymentGroup'
  CLUSTER_NAME: 'mini-project-1-cluster'
  CODEDEPLOY_APPLICATION: 'GalleryAppCodeDeployApplication'
  
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Private Registry
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # docker tag $IMAGE_TAG:latest $ECR_REPOSITORY:$IMAGE_TAG
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "ECR_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-blue-green:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: $ECS_TASK_DEFINITION
          service: $SERVICE_NAME
          cluster: $CLUSTER_NAME
          codedeploy-appspec: appspec.yaml
          codedeploy-application: $CODEDEPLOY_APPLICATION
          codedeploy-deployment-group: $CODEDEPLOY_DEPLOYMENT_GROUP
          wait-for-service-stability: true